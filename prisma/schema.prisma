generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== MODELOS DE USUARIO, SEGUIDORES Y VENTAS =====
model usuario {
  id                          String                        @id @default(uuid()) @db.Uuid
  usuario                     String                        @unique(map: "nombre_usuario") @db.VarChar(16)
  correo                      String                        @unique(map: "correo_usuario") @db.VarChar(255)
  clave                       String
  nombre_completo             String                        @db.VarChar(45)
  pais                        String                        @db.VarChar(45)
  fecha_creacion              DateTime                      @default(now()) @db.Date
  telefono                    String?                       @db.VarChar(15)
  genero                      GeneroUsuario
  avatar                      String                        @default("/assets/images/default-user.png") @db.VarChar(200)
  biografia                   String?                       @default("Soy nuevo en mindsovermarket!!") @db.VarChar(900)
  rol                         RolUsuario                    @default(usuario)
  bloqueado                   Boolean                       @default(false)
  facebook_url                String?
  instagram_url               String?
  twitter_url                 String?
  membresia                   String?                       @db.VarChar(45)
  expiracion_membresia        DateTime?
  experiencia_total           Int                           @default(0)
  fecha_nacimiento            DateTime                      @db.Date
  conexiones_usuario          conexiones_usuario?
  // RELACIONES CON CURSOS
  cursos_creados              curso[]                       @relation("curso_creador")
  cursos_estrellas            curso_estrellas[]             @relation("usuario_curso_estrellas")
  curso_progresos_usuario     curso_progreso_usuario[]
  curso_reconocimientos       curso_reconociento_usuario[]
  // RELACIONES CON ALERTAS
  alerta                      alerta[]
  paquetes_alertas            paquete_alertas[]             @relation("paquete_alertas_creador")
  paquetes_alertas_estrellas  alertas_estrellas[]           @relation("usuario_paquete_alertas_estrellas")
  // RELACIONES CON ARTICULOS
  articulos                   articulo[]
  articulos_estrellas         articulo_estrellas[]
  paquete_articulos           paquete_articulos[]           @relation("paquete_articulos_creador")
  paquete_articulos_estrellas paquete_articulos_estrellas[] @relation("usuario_paquete_articulos_estrellas")
  // RELACION CON ENVIVOS
  envivos                     envivo[]                      @relation("envivo_creador")
  envivos_estrellas           envivos_estrellas[]           @relation("usuario_envivo_estrellas")
  // RELACIONES CON SEGUIDORES
  seguidos                    seguidores[]                  @relation("seguido_id")
  seguidores                  seguidores[]                  @relation("seguidor_id")
  // REFERENCIAS
  referente_user              String?                       @db.VarChar(16)
  referente                   usuario?                      @relation("referral", fields: [referente_user], references: [usuario])
  referidos                   usuario[]                     @relation("referral")
  // RELACION CON COMPRAS Y VENTAS
  compras                     ventas[]                      @relation("compras_usuario")
  ventas                      ventas[]                      @relation("ventas_usuario")
}

model seguidores {
  seguidor_id String   @db.Uuid
  seguido_id  String   @db.Uuid
  fecha       DateTime @default(now()) @db.Date
  seguido     usuario  @relation("seguido_id", fields: [seguido_id], references: [id], onDelete: Cascade)
  seguidor    usuario  @relation("seguidor_id", fields: [seguidor_id], references: [id], onDelete: Cascade)

  @@id([seguidor_id, seguido_id], map: "seguidor_id_seguido_id")
}

model conexiones_usuario {
  id_usuario String   @id @db.Uuid
  token      String
  fecha      DateTime @default(now()) @db.Timestamp(6)
  usuario    usuario  @relation(fields: [id_usuario], references: [id], onDelete: Cascade)
}

model ventas {
  id                String             @id @default(uuid()) @db.Uuid
  id_membresia      String?            @db.Uuid
  id_curso          String?            @db.Uuid
  id_alertas        String?            @db.Uuid
  id_webinar        String?            @db.Uuid
  id_articulos      String?            @db.Uuid
  tipo              tipoProducto
  precio            Decimal            @db.Money
  fecha             DateTime           @default(now()) @db.Timestamp(6)
  id_comprador      String             @db.Uuid
  id_vendedor       String             @db.Uuid
  id_transaccion    String
  fecha_expiracion  DateTime
  comprador         usuario            @relation("compras_usuario", fields: [id_comprador], references: [id], onDelete: Cascade, map: "relacion_comprador")
  vendedor          usuario            @relation("ventas_usuario", fields: [id_vendedor], references: [id], onDelete: Cascade, map: "relacion_vendedor")
  paquete_alertas   paquete_alertas?   @relation("ventas_paquete_alertas", fields: [id_alertas], references: [id])
  paquete_articulos paquete_articulos? @relation("ventas_articulos", fields: [id_articulos], references: [id])
  curso             curso?             @relation("ventas_cursos", fields: [id_curso], references: [id])
  membresias        membresia?         @relation("ventas_membresia", fields: [id_membresia], references: [id])
  envivo            envivo?            @relation("ventas_envivo", fields: [id_webinar], references: [id])
}

// ===== MODELOS DE MEMBRESIAS =====

model membresia {
  id               String   @id @default(uuid()) @db.Uuid
  id_creador       String   @db.Uuid
  titulo           String   @db.VarChar(45)
  descripcion      String
  tags             String[]
  ruta_imagen      String   @db.VarChar(200)
  precio           Decimal  @db.Money
  duracion         Int
  ruta_aprendizaje String[]
  disponibilidad   Boolean  @default(true)
  fecha_creacion   DateTime @default(now()) @db.Timestamp(6)
  estrellas        Int      @default(0)
  ventas           ventas[] @relation("ventas_membresia")

  @@index([id_creador], map: "id_creador_suscripcion")
}

// ===== MODELOS CURSOS =====

model curso {
  id                         String                       @id @default(uuid()) @db.Uuid
  id_creador                 String                       @db.Uuid
  titulo                     String
  descripcion                String
  resumen                    String?
  fecha_creacion             DateTime                     @default(now())
  precio                     Decimal                      @db.Money
  dificultad                 CursoDificultad
  ruta_aprendizaje           String[]
  disponibilidad             Boolean                      @default(true)
  creador                    usuario                      @relation("curso_creador", fields: [id_creador], references: [id], onDelete: Cascade)
  estrellas                  curso_estrellas[]            @relation("curso_estrellas")
  curso_elementos            curso_elemento[]
  curso_progreso_usuario     curso_progreso_usuario[]
  curso_reconociento_usuario curso_reconociento_usuario[]
  ventas                     ventas[]                     @relation("ventas_cursos")

  @@index([id_creador], map: "cursos_creados")
}

model curso_estrellas {
  id         String  @id @default(uuid()) @db.Uuid
  curso_id   String  @db.Uuid
  usuario_id String  @db.Uuid
  usuario    usuario @relation("usuario_curso_estrellas", fields: [usuario_id], references: [id], onDelete: Cascade)
  curso      curso   @relation("curso_estrellas", fields: [curso_id], references: [id], onDelete: Cascade)
}

model curso_elemento {
  id                String                   @id @default(uuid()) @db.Uuid
  titulo            String
  descripcion       String                   @db.VarChar(900)
  ruta              String?
  tipo              String
  valor_experiencia Int
  curso_id          String                   @db.Uuid
  curso             curso                    @relation(fields: [curso_id], references: [id], onDelete: Cascade, map: "relacion_curso")
  progreso          curso_progreso_usuario[]
}

model curso_progreso_usuario {
  id             String         @id @default(uuid()) @db.Uuid
  id_curso       String         @db.Uuid
  id_usuario     String         @db.Uuid
  id_elemento    String         @db.Uuid
  date           DateTime       @default(now())
  curso          curso          @relation(fields: [id_curso], references: [id], onDelete: Cascade, map: "relacion_curso")
  curso_elemento curso_elemento @relation(fields: [id_elemento], references: [id], onDelete: Cascade, map: "relacion_elemento")
  usuario        usuario        @relation(fields: [id_usuario], references: [id], onDelete: Cascade, map: "relacion_usuario")

  @@index([id_curso], map: "curso_progreso")
  @@index([id_elemento], map: "elemento_progreso")
  @@index([id_usuario], map: "progreso_usuario")
}

model curso_reconociento_usuario {
  id         String   @id @default(uuid()) @db.Uuid
  id_curso   String   @db.Uuid
  id_usuario String   @db.Uuid
  date       DateTime @default(now()) @db.Date
  curso      curso    @relation(fields: [id_curso], references: [id], onDelete: Cascade, map: "relacion_curso")
  usuario    usuario  @relation(fields: [id_usuario], references: [id], onDelete: Cascade, map: "relacion_usuario")

  @@index([id_curso], map: "curso_reconocimiento")
  @@index([id_usuario], map: "usuario_reconocimiento")
}

// ===== MODELOS DE ALERTAS, PAQUETES DE ALERTAS =====

model paquete_alertas {
  id             String              @id @default(uuid()) @db.Uuid
  id_creador     String              @db.Uuid
  titulo         String
  descripcion    String
  resumen        String?
  precio         Decimal             @db.Money
  disponibilidad Boolean             @default(true)
  mercado        String
  fecha_creacion DateTime            @default(now()) @db.Timestamp(6)
  creador        usuario             @relation("paquete_alertas_creador", fields: [id_creador], references: [id], onDelete: Cascade)
  ventas         ventas[]            @relation("ventas_paquete_alertas")
  estrellas      alertas_estrellas[] @relation("paquete_alertas_estrellas")
  alerta         alerta[]
}

model alertas_estrellas {
  id         String          @id @default(uuid()) @db.Uuid
  alertas_id String          @db.Uuid
  usuario_id String          @db.Uuid
  usuario    usuario         @relation("usuario_paquete_alertas_estrellas", fields: [usuario_id], references: [id], onDelete: Cascade)
  paquete    paquete_alertas @relation("paquete_alertas_estrellas", fields: [alertas_id], references: [id], onDelete: Cascade)
}

model alerta {
  id             String           @id @default(uuid()) @db.Uuid
  id_creador     String           @db.Uuid
  id_paquete     String?          @db.Uuid
  mercado        String
  tipo           AlertaTipo
  precio         String
  direccion      AlertaDireccion
  descripcion    String
  stop_loss      String?
  intervalo      AlertaIntervalo?
  fecha          DateTime?
  fecha_creacion DateTime         @default(now())
  publicada      Boolean          @default(false)
  creador        usuario          @relation(fields: [id_creador], references: [id])
  paqute         paquete_alertas? @relation(fields: [id_paquete], references: [id], onDelete: Cascade)
}

model envivo {
  id                String              @id @default(uuid()) @db.Uuid
  id_creador        String              @db.Uuid
  titulo            String
  descripcion       String
  resumen           String?
  precio            Decimal             @db.Money
  duracion          Int
  disponibilidad    Boolean             @default(true)
  fecha_creacion    DateTime            @default(now()) @db.Timestamp(6)
  fecha             DateTime            @db.Date
  tiempo_inicial    DateTime            @db.Time
  tiempo_final      DateTime            @db.Time
  url_webinar       String
  estrellas         Int                 @default(0)
  ventas            ventas[]            @relation("ventas_envivo")
  creador           usuario             @relation("envivo_creador", fields: [id_creador], references: [id], onDelete: Cascade)
  envivos_estrellas envivos_estrellas[] @relation("envivo_estrellas")
}

model envivos_estrellas {
  id         String  @id @default(uuid()) @db.Uuid
  alertas_id String  @db.Uuid
  usuario_id String  @db.Uuid
  usuario    usuario @relation("usuario_envivo_estrellas", fields: [usuario_id], references: [id], onDelete: Cascade)
  paquete    envivo  @relation("envivo_estrellas", fields: [alertas_id], references: [id], onDelete: Cascade)
}

//===== ARTICULOS, PAQUETES Y ESTRELLAS =====//

model articulo {
  id                 String               @id @default(uuid()) @db.Uuid
  id_creador         String               @db.Uuid
  id_paquete         String?              @db.Uuid
  titulo             String
  fecha              DateTime             @db.Date
  estrellas          Int
  categoria          String
  mercado            String
  tendencia          TendenciaArticulo
  resumen            String?
  // relaciones
  creador            usuario              @relation(fields: [id_creador], references: [id])
  paquete            paquete_articulos?   @relation("paquete_articulos", fields: [id_paquete], references: [id], onDelete: Cascade)
  contenido          articulo_elemento[]
  articulo_estrellas articulo_estrellas[]
}

model articulo_estrellas {
  id_articulo String   @db.Uuid
  id_usuario  String   @db.Uuid
  usuario     usuario  @relation(fields: [id_usuario], references: [id], onDelete: Cascade)
  articulo    articulo @relation(fields: [id_articulo], references: [id], onDelete: Cascade)

  @@id([id_articulo, id_usuario])
}

model articulo_elemento {
  id          String                 @id @default(uuid()) @db.Uuid
  content     String
  src         String?
  alt         String?
  level       Int?
  items       String[]
  type        tipo_elemento_articulo
  articulo_id String                 @db.Uuid
  position    Int?
  articulo    articulo               @relation(fields: [articulo_id], references: [id])
}

model paquete_articulos {
  id             String                        @id @default(uuid()) @db.Uuid
  id_creador     String                        @db.Uuid
  titulo         String
  descripcion    String
  resumen        String?
  precio         Decimal                       @db.Money
  disponibilidad Boolean                       @default(true)
  fecha_creacion DateTime                      @default(now()) @db.Timestamp(6)
  categoria      String
  mercado        String
  estrellas      paquete_articulos_estrellas[] @relation("paquete_articulos_estrellas")
  creador        usuario                       @relation("paquete_articulos_creador", fields: [id_creador], references: [id])
  ventas         ventas[]                      @relation("ventas_articulos")
  articulos      articulo[]                    @relation("paquete_articulos")
}

model paquete_articulos_estrellas {
  id           String            @id @default(uuid()) @db.Uuid
  articulos_id String            @db.Uuid
  usuario_id   String            @db.Uuid
  usuario      usuario           @relation("usuario_paquete_articulos_estrellas", fields: [usuario_id], references: [id], onDelete: Cascade)
  paquete      paquete_articulos @relation("paquete_articulos_estrellas", fields: [articulos_id], references: [id], onDelete: Cascade)
}

//===== ENUM's =====//

enum AlertaDireccion {
  bullish
  bearish
}

enum AlertaIntervalo {
  minutes_1
  minutes_5
  minutes_15
  minutes_30
  hours_1
  hours_4
  days_1
  weeks_1
}

enum AlertaTipo {
  soporte
  resistencia
  ruptura
  reversion
  tendencia
  patron
  divergencia
  fibonacci
  pivote
  volatilidad
}

enum TendenciaArticulo {
  alcista
  bajista
  neutral
}

enum tipo_elemento_articulo {
  paragraph
  image
  video
  quote
  heading
  list
}

enum tipoProducto {
  articulo
  cursos
  alertas
  webinar
  membresia
}

enum RolUsuario {
  usuario
  instructor
  administrador
  desarrollador
}

enum GeneroUsuario {
  masculino
  femenino
  otro
}

enum CursoDificultad {
  principiante
  intermedio
  avanzado
  general
}
